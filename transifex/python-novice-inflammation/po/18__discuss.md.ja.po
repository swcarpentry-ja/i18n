# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-12-11 17:59:01+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: python-novice-inflammation/_extras/discuss.md:1
#: python-novice-inflammation/bin/boilerplate/_extras/discuss.md:1
# Front Matter
msgid "---\n"
"title: Discussion\n"
"---"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:4
# header
msgid "## Rules of Debugging"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:6
# ordered list
msgid "1.  Fail early, fail often."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:7
# ordered list
msgid "2.  Always initialize from data."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:8
# ordered list
msgid "3.  Know what it's supposed to do."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:9
# ordered list
msgid "4.  Make it fail every time."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:10
# ordered list
msgid "5.  Make it fail fast."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:11
# ordered list
msgid "6.  Change one thing at a time, for a reason."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:12
# ordered list
msgid "7.  Keep track of what we've done."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:13
# ordered list
msgid "8.  Be humble."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:14
# ordered list
msgid "9.  Test the simple things first."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:16
msgid "And remember,\n"
"a week of hard work can sometimes save you an hour of thought."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:19
# header
msgid "## The Call Stack"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:21
msgid "Let's take a closer look at what happens when we call `fahr_to_celsius(32.0)`.\n"
"To make things clearer,\n"
"we'll start by putting the initial value 32.0 in a variable\n"
"and store the final result in one as well:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:26
# code block
msgid "~~~\n"
"original = 32.0\n"
"final = fahr_to_celsius(original)\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:32
msgid "The diagram below shows what memory looks like after the first line has been executed:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:34
msgid "![Call Stack (Initial State)](../fig/python-call-stack-01.svg)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:36
msgid "When we call `fahr_to_celsius`,\n"
"Python *doesn't* create the variable `temp` right away.\n"
"Instead,\n"
"it creates something called a [stack frame]({{ page.root }}/reference.html#stack-frame)\n"
"to keep track of the variables defined by `fahr_to_kelvin`.\n"
"Initially,\n"
"this stack frame only holds the value of `temp`:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:44
msgid "![Call Stack Immediately After First Function Call](../fig/python-call-stack-02.svg)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:46
msgid "When we call `fahr_to_kelvin` inside `fahr_to_celsius`,\n"
"Python creates another stack frame to hold `fahr_to_kelvin`'s variables:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:49
msgid "![Call Stack During First Nested Function Call](../fig/python-call-stack-03.svg)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:51
msgid "It does this because there are now two variables in play called `temp`:\n"
"the parameter to `fahr_to_celsius`,\n"
"and the parameter to `fahr_to_kelvin`.\n"
"Having two variables with the same name in the same part of the program would be ambiguous,\n"
"so Python (and every other modern programming language) creates\n"
"a new stack frame for each function call\n"
"to keep that function's variables separate from those defined by other functions."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:59
msgid "When the call to `fahr_to_kelvin` returns a value,\n"
"Python throws away `fahr_to_kelvin`'s stack frame\n"
"and creates a new variable in the stack frame for `fahr_to_celsius`\n"
"to hold the temperature in Kelvin:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:64
msgid "![Call Stack After Return From First Nested Function Call](../fig/python-call-stack-04.svg)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:66
msgid "It then calls `kelvin_to_celsius`,\n"
"which means it creates a stack frame to hold that function's variables:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:69
msgid "![Call Stack During Call to Second Nested Function](../fig/python-call-stack-05.svg)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:71
msgid "Once again,\n"
"Python throws away that stack frame when `kelvin_to_celsius` is done\n"
"and creates the variable `result` in the stack frame for `fahr_to_celsius`:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:75
msgid "![Call Stack After Second Nested Function Returns](../fig/python-call-stack-06.svg)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:77
msgid "Finally,\n"
"when `fahr_to_celsius` is done,\n"
"Python throws away *its* stack frame\n"
"and puts its result in a new variable called `final`\n"
"that lives in the stack frame we started with:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:83
msgid "![Call Stack After All Functions Have Finished](../fig/python-call-stack-07.svg)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:85
msgid "This final stack frame is always there;\n"
"it holds the variables we defined outside the functions in our code.\n"
"What it *doesn't* hold is the variables that were in the various stack frames.\n"
"If we try to get the value of `temp` after our functions have finished running,\n"
"Python tells us that there's no such thing:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:91
# code block
msgid "~~~\n"
"print('final value of temp after all function calls:', temp)\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:96
# code block
msgid "~~~\n"
"---------------------------------------------------------------------------\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-12-ffd9b4dbd5f1> in <module>()\n"
"----> 1 print('final value of temp after all function calls:', temp)\n"
"\n"
"NameError: name 'temp' is not defined\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:106
# code block
msgid "~~~\n"
"final value of temp after all function calls:\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:111
msgid "Why go to all this trouble?\n"
"Well,\n"
"here's a function called `span` that calculates the difference between\n"
"the minimum and maximum values in an array:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:116
# code block
msgid "~~~\n"
"import numpy\n"
"\n"
"def span(a):\n"
"    diff = numpy.max(a) - numpy.min(a)\n"
"    return diff\n"
"\n"
"data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')\n"
"print('span of data:', span(data))\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:128
#: python-novice-inflammation/_extras/discuss.md:142
# code block
msgid "~~~\n"
"span of data: 20.0\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:133
msgid "Notice that `span` assigns a value to a variable called `diff`.\n"
"We might very well use a variable with the same name to hold data:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:136
# code block
msgid "~~~\n"
"diff = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')\n"
"print('span of data:', span(diff))\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:147
msgid "We don't expect `diff` to have the value 20.0 after this function call,\n"
"so the name `diff` cannot refer to the same thing inside `span`\n"
"as it does in the main body of our program.\n"
"And yes,\n"
"we could probably choose a different name than `diff` in our main program in this case,\n"
"but we don't want to have to read every line of NumPy to see what variable names its functions use\n"
"before calling any of those functions,\n"
"just in case they change the values of our variables."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:156
msgid "The big idea here is [encapsulation]({{ page.root }}/reference.html#encapsulation),\n"
"and it's the key to writing correct, comprehensible programs.\n"
"A function's job is to turn several operations into one\n"
"so that we can think about a single function call\n"
"instead of a dozen or a hundred statements\n"
"each time we want to do something.\n"
"That only works if functions don't interfere with each other;\n"
"if they do,\n"
"we have to pay attention to the details once again,\n"
"which quickly overloads our short-term memory."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:167
# blockquote, which can be cascaded
msgid "> ## Following the Call Stack"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:168
msgid ">\n"
"> We previously wrote functions called `fence` and `outer`.\n"
"> Draw a diagram showing how the call stack changes when we run the following:\n"
">\n"
"> ~~~\n"
"> print(outer(fence('carbon', '+')))\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:178
# header
msgid "## Image Grids"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:180
msgid "Let's start by creating some simple heat maps of our own\n"
"using a library called `ipythonblocks`.\n"
"The first step is to create our own \"image\":"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:184
# code block
msgid "~~~\n"
"from ipythonblocks import ImageGrid\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:189
msgid "Unlike the `import` statements we have seen earlier,\n"
"this one doesn't load the entire `ipythonblocks` library.\n"
"Instead,\n"
"it just loads `ImageGrid` from that library,\n"
"since that's the only thing we need (for now)."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:195
msgid "Once we have `ImageGrid` loaded,\n"
"we can use it to create a very simple grid of colored cells:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:198
# code block
msgid "~~~\n"
"grid = ImageGrid(5, 3)\n"
"grid.show()\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:204
msgid "![](../fig/grid-01.png)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:206
msgid "Just like a NumPy array,\n"
"an `ImageGrid` has some properties that hold information about it:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:209
# code block
msgid "~~~\n"
"print('grid width:', grid.width)\n"
"print('grid height:', grid.height)\n"
"print('grid lines on:', grid.lines_on)\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:216
# code block
msgid "~~~\n"
"grid width: 5\n"
"grid height: 3\n"
"grid lines on: True\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:223
msgid "The obvious thing to do with a grid like this is color in its cells,\n"
"but in order to do that,\n"
"we need to know how computers represent color.\n"
"The most common schemes are [RGB]({{ page.root }}/reference.html#rgb),\n"
"which is short for \"red, green, blue\".\n"
"RGB is an [additive color model]({{ page.root }}/reference.html#additive-color-model):\n"
"every shade is some combination of red, green, and blue intensities.\n"
"We can think of these three values as being the axes in a cube:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:232
msgid "![RGB Color Cube](../fig/color-cube.png)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:234
msgid "An RGB color is an example of a multi-part value:\n"
"like a Cartesian coordinate,\n"
"it is one thing with several parts.\n"
"We can represent such a value in Python using a [tuple]({{ page.root }}/reference.html#tuple),\n"
"which we write using parentheses instead of the square brackets used for a list:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:240
# code block
msgid "~~~\n"
"position = (12.3, 45.6)\n"
"print('position is:', position)\n"
"color = (10, 20, 30)\n"
"print('color is:', color)\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:248
# code block
msgid "~~~\n"
"position is: (12.3, 45.6)\n"
"color is: (10, 20, 30)\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:254
msgid "We can select elements from tuples using indexing,\n"
"just as we do with lists and arrays:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:257
# code block
msgid "~~~\n"
"print('first element of color is:', color[0])\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:262
# code block
msgid "~~~\n"
"first element of color is: 10\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:267
msgid "Unlike lists and arrays,\n"
"though,\n"
"tuples cannot be changed after they are created --- in technical terms,\n"
"they are [immutable]({{ page.root }}/reference.html#immutable):"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:272
# code block
msgid "~~~\n"
"color[0] = 40\n"
"print('first element of color after change:', color[0])\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:278
# code block
msgid "~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-11-9c3dd30a4e52> in <module>()\n"
"----> 1 color[0] = 40\n"
"2 print('first element of color after change:', color[0])\n"
"\n"
"TypeError: 'tuple' object does not support item assignment\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:289
msgid "If a tuple represents an RGB color,\n"
"its red, green, and blue components can take on values between 0 and 255.\n"
"The upper bound may seem odd,\n"
"but it's the largest number that can be represented in an 8-bit byte\n"
"(i.e., 2<sup>8</sup>-1).\n"
"This makes it easy for computers to manipulate colors,\n"
"while providing fine enough gradations to fool most human eyes,\n"
"most of the time."
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:298
msgid "Let's see what a few RGB colors actually look like:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:300
# code block
msgid "~~~\n"
"row = ImageGrid(8, 1)\n"
"row[0, 0] = (0, 0, 0)   # no color => black\n"
"row[1, 0] = (255, 255, 255) # all colors => white\n"
"row[2, 0] = (255, 0, 0) # all red\n"
"row[3, 0] = (0, 255, 0) # all green\n"
"row[4, 0] = (0, 0, 255) # all blue\n"
"row[5, 0] = (255, 255, 0) # red and green\n"
"row[6, 0] = (255, 0, 255) # red and blue\n"
"row[7, 0] = (0, 255, 255) # green and blue\n"
"row.show()\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:314
msgid "![](../fig/grid-02.png)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:316
msgid "Simple color values like `(0,255,0)` are easy enough to decipher with a bit of practice,\n"
"but what color is `(214,90,127)`?\n"
"To help us,\n"
"`ipythonblocks` provides a function called `show_color`:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:321
# code block
msgid "~~~\n"
"from ipythonblocks import show_color\n"
"show_color(214, 90, 127)\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:327
msgid "![](../fig/ipythonblocks_show_color_example.png)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:329
msgid "It also provides a table of standard colors:"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:331
# code block
msgid "~~~\n"
"from ipythonblocks import colors\n"
"c = ImageGrid(3, 2)\n"
"c[0, 0] = colors['Fuchsia']\n"
"c[0, 1] = colors['Salmon']\n"
"c[1, 0] = colors['Orchid']\n"
"c[1, 1] = colors['Lavender']\n"
"c[2, 0] = colors['LimeGreen']\n"
"c[2, 1] = colors['HotPink']\n"
"c.show()\n"
"~~~"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:344
msgid "![](../fig/grid-03.png)"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:346
# blockquote, which can be cascaded
msgid "> ## Making a Colorbar"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:347
msgid ">\n"
"> Fill in the `____` in the code below to create a bar that changes color from dark blue to black.\n"
">\n"
"> ~~~\n"
"> bar = ImageGrid(10, 1)\n"
"> for x in range(10):\n"
">     bar[x, 0] = (0, 0, ____)\n"
"> bar.show()\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:359
# blockquote, which can be cascaded
msgid "> ## Why RGB?"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:360
msgid ">\n"
"> Why do computers use red, green, and blue as their primary colors?"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:364
# blockquote, which can be cascaded
msgid "> ## Nested Loops"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:365
msgid ">\n"
"> Will changing the nesting of the loops in the code above --- i.e.,\n"
"> wrapping the Y-axis loop around the X-axis loop --- change the final image?\n"
"> Why or why not?"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:371
# blockquote, which can be cascaded
msgid "> ## Where to Change Data"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:372
msgid ">\n"
"> Why did we transpose our data outside our heat map function?\n"
"> Why not have the function perform the transpose?"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:377
# blockquote, which can be cascaded
msgid "> ## Return Versus Display"
msgstr ""

#: python-novice-inflammation/_extras/discuss.md:378
msgid ">\n"
"> Why does the heat map function return the grid rather than displaying it immediately?\n"
"> Do you think this is a good or bad design choice?"
msgstr ""

